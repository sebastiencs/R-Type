
===================================================
Protocole de communication pour le projet R-Type V1
===================================================

Toutes les chaines de caracteres seront encodees en ASCII.
Lors de l'envoi d'une chaine de caracteres, tous les octets non utilisés sont a zero.
Le communication est base sur un protocle UDP, le transferts de bits est en little endian.

1 - 1ere connection


Lorsqu'un client se connecte au serveur, il (le client) lui envoi quelques infos.
Ensuite le serveur lui reponds pour determiner si on peut commencer l'envoi des
donnees.

	 --------------------------------------------
Client:	|    ID   | Version  |   Name    |   Level   |
	 ----------------------	---------------------
	| uint8_t | uint16_t |  char[16] |  uint8_t  |
	 ---------------------- ---------------------


	ID: unsigned char ( 8 bits )

	     	 Valeur: 0

	Version: unsigned short ( 16 bits )

		 Le client envoi sa version du protocole.

	Name: char[16]

	    	 Chaine de caracteres correspondant au nom du client sur 16 octets

	Level: unsigned char ( 8 bits )

		 Le client envoi son niveau



----------------------------------------------------

Les prochains paquets commenceront par un octet qui permet d'identifier
le type de requete/reponse.

----------------------------------------------------



2 - Demande de la liste des parties disponible

Le client envoi ce paquet pour demander au serveur quelles parties sont dispos

         ---------
Client: |   ID    |
         ---------
	| uint8_t |
         ---------

	 ID: unsigned char ( 8 bits )

	     	  Valeur: 1

----------------------------------------------------


3 - Envoi de la liste des parties disponibles

Le serveur lui renvoi le nombre de parties disponibles, leurs noms et le nombre
Le nombre de partie maximum sur un serveur est 5.
de joueurs dans chaque parties


          -------------------------------------------------------------------------
Serveur: |    ID   | NB Parties ||   Name   |   nb    ||   Name1   |   nb1    |
	  -------------------------------------------------------------------------
	 | uint8_t |  uint16_t  || char[16] | uint8_t || char[16]  | uint8_t  |
          -------------------------------------------------------------------------

	  ID: unsigned char ( 8 bits )

	     	  Valeur: 2

	  NB Parties: unsigned short ( 16 bits )

	     	  Nombre qui defini le nombre de parties disponibles.
		  La taille du paquet complet sera de:

		     sizeof(ID) + sizeof(NB Parties) + NB Parties * (sizeof(Name) + sizeof(nb))

	  Name: char[16]

		  Nom de la partie sur 16 octets

	  nb: unsigned char ( 8 bits )

	      	  Nombres de joueurs dans la partie


----------------------------------------------------


4 - Rejoindre une partie

Le client envoi ce paquet lorsqu'il souhaite rejoindre une partie
Une reponse du serveur est attendue.

         --------------------
Client: |   ID    |   Name   |
         --------------------
	| uint8_t | char[16] |
         --------------------

	 ID: unsigned char ( 8 bits )

	         Valeur: 3

         Name: char[16]

	         Nom de la partie souhaitee

----------------------------------------------------

5 - Creer une partie

Le client envoi ce paquet lorsqu'il souhaite creer une partie
Une reponse du serveur est attendue.

         --------------------
Client: |   ID    |   Name   |
         --------------------
	| uint8_t | char[16] |
         --------------------

	 ID: unsigned char ( 8 bits )

	         Valeur: 4

         Name: char[16]

	         Nom de la partie souhaitee


----------------------------------------------------

6 - Demande de la liste des joueurs

Le client envoi ce paquet lorsqu'il est accepté dans une partie
Une reponse du serveur est attendue.

         ---------
Client: |   ID    |
         ---------
	| uint8_t |
         ---------

	 ID: unsigned char ( 8 bits )

	         Valeur: 5


----------------------------------------------------

7 - Envoit de la liste des joueurs

Le serveur envoit ce paquet lorsqu'un client est accepté dans une partie

          -----------------------------------------------------------------------------------------
Serveur: |    ID   | NB Joueurs ||   Name   |   id    |  Level  ||   Name1   |   id1   |  Level1 |
	  -----------------------------------------------------------------------------------------
	 | uint8_t |  uint8_t   || char[16] | uint8_t | uint8_t || char[16]  | uint8_t | uint8_t |
          -----------------------------------------------------------------------------------------

	 ID: unsigned char ( 8 bits )

	         Valeur: 6

	 Nbr Joueurs: unsigned char ( 8 bits )

	         Valeur: nbr de joueurs dans la partie
		 La taille du paquet complet sera de:

		     sizeof(ID) + sizeof(NB Joueurs) + NB Joueurs * (sizeof(Name) + sizeof(id) + sizeof(Level))

         Name: char[16]

	         Nom du joueur

	 id: unsigned char ( 8 bits )

	         Identifiant du joueur

	 Level: unsigned char ( 8 bits )

	         Level du joueurs

----------------------------------------------------


XXX - Retour du serveur


Reponse du serveur lorsque le client demande quelque chose

          -------------------------------
Serveur: |    ID   | Retour   |   Data   |
	 --------------------------------
	 | uint8_t | uint8_t  | uint32_t |
          -------------------------------

	  ID: unsigned char ( 8 bits )

	     	Valeur: XXX ( je sais pas pour l'instant )


	  Retour: unsigned char ( 8 bits )

		0	Erreur	La version du protocole n'est pas bonne. Le client se deconnecte
		1	Erreur	Donnees envoyees au serveur invalides.
		2	Succes	Le numero du protocole est connu du serveur.
		3	Erreur	La creation de la partie n'est pas bonne ( Nom deja utilisé par exemple )
					Ne peut pas rejoindre la parties ( Trop de monde par exemple )
		4	Succes	Peut creer / rejoindre la partie

	  Data: unsigned int ( 32 bits )

		Valeure complémentaire du retour

		Si retour == 2:  Correspond a l'id que le serveur aura donné au client

		Sinon data = 0.
